{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Teaching","text":""},{"location":"#abstract","title":"Abstract","text":"<p>Some content for teaching purposes.</p>"},{"location":"#development-related","title":"Development related","text":"<ul> <li>Typescript with GTS and ESBUILD</li> </ul>"},{"location":"#working-with-git","title":"Working with git","text":"<ul> <li>GIT - Share secrets</li> <li>GIT - multi user</li> <li>GIT - how and why to sign commits</li> <li>GIT - secrets how to prevent commit passwords</li> <li>GIT - actions-template-sync</li> </ul>"},{"location":"ts_gts_esbuild/","title":"Typescript project with gts and esbuild","text":""},{"location":"ts_gts_esbuild/#abstract","title":"Abstract","text":"<p>When starting a new typescript project you need to configure lots of things</p> <ul> <li>npm project settings</li> <li>typescript transpiler settings</li> <li>folder structure</li> <li>style checker and formatter</li> <li>bundler</li> </ul> <p>To minize the effort gts is a nice tool to help you setting up the project. Our of deployment/devliver purposes we also want to bundle the code to create nice and small artifacts. For those purposes we use esbuild. The whole example can be found here</p>"},{"location":"ts_gts_esbuild/#prerequisites","title":"Prerequisites","text":"<p>For starting this tutorial you need to have nodejs and npm (also npx) installed on your machine. Some basic knowledge about nodejs, npm and npx is helpful.</p>"},{"location":"ts_gts_esbuild/#create-the-project","title":"Create the project","text":"<p>Please keep in mind that some of the outputs can vary on your system related to the used versions.</p> <p>So lets start some actions. First we want to create the npm project. Therefore please <code>cd</code> into a nice directory of your choice.</p> <p>Now lets create the project directory and the npm typescript project with the help of gts.</p> <p>Remark We add the <code>-y</code> flag to accept the default settings. If you want to adjust those, just do not add the flag.</p> <pre><code>mkdir ts_gts_esbuild\ncd ts_gts_esbuild\nnpx gts init -y\n</code></pre>"},{"location":"ts_gts_esbuild/#analyse","title":"Analyse","text":"<p>Now lets see what we got.</p> <pre><code>$ tree -a -L 1\n.\n\u251c\u2500\u2500 .eslintignore\n\u251c\u2500\u2500 .eslintrc.json\n\u251c\u2500\u2500 node_modules\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 package-lock.json\n\u251c\u2500\u2500 .prettierrc.js\n\u251c\u2500\u2500 src\n\u2514\u2500\u2500 tsconfig.json\n\n2 directories, 6 files\n</code></pre> <p>Because we do not want to add build artifacts and dependent libs to our git database we add them to .gitignore</p> <p>Remark The build/ folder is  used per default for the typescript build artefacts.</p> <pre><code>echo node_modules/ &gt;&gt; .gitignore\necho build/ &gt;&gt; .gitignore\n</code></pre> <p>We can see that we received some default settings</p> <ul> <li>npm project settings</li> <li>typescript transpiler settings</li> <li>folder structure</li> <li>style checker and formatter</li> </ul>"},{"location":"ts_gts_esbuild/#npm-project-settings","title":"NPM project settings","text":"<pre><code>$ cat package.json\n{\n  \"name\": \"\",\n  \"version\": \"0.0.0\",\n  \"description\": \"\",\n  \"main\": \"build/src/index.js\",\n  \"types\": \"build/src/index.d.ts\",\n  \"files\": [\n    \"build/src\"\n  ],\n  \"license\": \"Apache-2.0\",\n  \"keywords\": [],\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",\n    \"lint\": \"gts lint\",\n    \"clean\": \"gts clean\",\n    \"compile\": \"tsc\",\n    \"fix\": \"gts fix\",\n    \"prepare\": \"npm run compile\",\n    \"pretest\": \"npm run compile\",\n    \"posttest\": \"npm run lint\"\n  },\n  \"devDependencies\": {\n    \"gts\": \"^3.1.0\",\n    \"typescript\": \"^4.0.3\",\n    \"@types/node\": \"^14.11.2\"\n  }\n}\n</code></pre> <p>As you can see some devDependencies have been installed. Also we got some preparations for delivering a npm package. Furthermore we got some npm scripts.</p>"},{"location":"ts_gts_esbuild/#typescript-transpiler-settings","title":"Typescript transpiler settings","text":"<pre><code>npm run compile\n</code></pre> <p>This will compile the typescript sources defined in tsconfig.json file and put the built aretefacts into the outDir folder defined in tsconfig.json.</p> <pre><code>npm run clean\n</code></pre> <p>This will cleanup the typescript build artefacts (delete the outDir directory defined in tsconfig.json).</p>"},{"location":"ts_gts_esbuild/#style-checker-and-formatter","title":"Style checker and formatter","text":"<pre><code>npm run lint\n</code></pre> <p>This will run the style checker eslint.</p> <pre><code>npm run fix\n</code></pre> <p>This will fix some of the found lint issues.</p>"},{"location":"ts_gts_esbuild/#bundler","title":"bundler","text":"<p>Because we also want to bundle our project we first install esbuild as dev dependency</p> <pre><code>npm i -D esbuild\n</code></pre> <p>Lets test it.</p> <pre><code>npx esbuild src/index.ts\n</code></pre> <p>The output is the bundled file.</p> <p>You can pass lots of options to the cli interface. However, using the command-line interface can become unwieldy if you need to pass many options to esbuild. For more sophisticated uses you will likely want to write a build script in JavaScript using esbuild's JavaScript API.</p> <p>We will do that now. Lets create a small nodejs binary.</p> <pre><code>mkdir bin\ntouch bin/esbuild.mjs\n</code></pre> <p>now please copy the following content to the file</p> <pre><code>#!/usr/bin/env node\n\nimport esbuild from 'esbuild';\n\nconst build = esbuild.build({\n  entryPoints: [\"src/index.ts\"],\n  outdir: \"dist\",\n  bundle: true,\n  loader: {\".ts\": \"ts\"}\n});\n\nawait build;\n</code></pre> <p>as you can see we will have the outdir dist set. We also need to add this to our .gitignore file.</p> <pre><code>echo dist/ &gt;&gt; .gitignore\n</code></pre> <p>Now lets test it</p> <pre><code>node bin/esbuild.mjs\n</code></pre> <p>As you can see the bundled package is built.</p> <p>Now we can add a new npm script. Please add a new script within the script part in package.json. Because in addition we want to create the types we also add <code>npx tsc --emitDeclarationOnly --outDir dist/types</code></p> <pre><code>...\n\"scripts\": {\n  ...\n  \"posttest\": \"npm run lint\",\n  \"bundle\": \"npx tsc --emitDeclarationOnly --outDir dist/types &amp;&amp; node bin/esbuild.mjs\"\n},\n...\n</code></pre>"},{"location":"ts_gts_esbuild/#option-package","title":"[option] Package","text":"<p>Now we have the option to create a nice small npm package. Therefore we need to add a <code>.npmignore</code> file and add some content.</p> <pre><code>touch .npmignore\necho node_modules/ &gt;&gt; .npmignore\necho build/ &gt;&gt; .npmignore\necho bin/ &gt;&gt; .npmignore\necho src/ &gt;&gt; .npmignore\n</code></pre> <p>Also we need to adjust some paths within our package.json</p> <pre><code>\"name\": \"ts-gts-esbuild\",\n\"version\": \"0.1.0\",\n\"description\": \"\",\n\"main\": \"dist/index.js\",\n\"types\": \"dist/src/index.d.ts\",\n...\n</code></pre> <p>We can test it now</p> <pre><code>npm package\n</code></pre> <p>This will create a tar archive in your package folder. You can check it.</p>"},{"location":"ts_gts_esbuild/#cons","title":"Cons","text":"<p>There are lots of pros related to this project setup. But of course there are also some cons. One of them is that gts is out of the box not properly working with npm workspaces yet gts issue. But you just need to do the gts init within the repos and adjust some path parameters in some files.</p> <p></p>"},{"location":"git/git_action_sync/","title":"GitHub actions-template-sync","text":""},{"location":"git/git_action_sync/#abstract","title":"abstract","text":"<p>Sometimes we want to synchronise some git repositories. In general this is not a huge task using commands like</p> <pre><code>git checkout -b \"${NEW_BRANCH}\"\ngit pull \"${SOURCE_REPO}\" --allow-unrelated-histories\n</code></pre> <p>in the target repository. Often there are many repositories you want to synchronize. E.q. you have created your repositories using a GitHub template repository. Click the links to get some more information about how to create and use template repositories. When you are making changes within the template repository often like to propagate those changes into the repositories created from the template. To automate this task I created a Github action acions-template-sync Instead of looping through all repositories and execute the commands listed above you can configure the actions-template-sync and receive automatically Pull requests within the target repositories.</p>"},{"location":"git/git_action_sync/#remarks","title":"Remarks","text":"<ul> <li>It is possible to use this github action even if the source repository is not a template repository.</li> <li>If you are interested in the source code, please checkout the source code repository. Contributions of any kind are welcome.</li> </ul>"},{"location":"git/git_action_sync/#usage","title":"Usage","text":"<p>The usage is designed to be simple. Just put a <code>actions_templae_sync.yaml</code> definition file into your <code>.github/workflows/</code> folder. Please click the following link if you want to get further information about GitHub Actions. The content of the file should look like the following</p> <pre><code>name: actions-template-sync\n\non:\n  # cronjob trigger At 00:00 on day-of-month 1. https://crontab.guru/every-month\n  schedule:\n  - cron:  \"0 0 1 * *\"\n  # manual trigger\n  workflow_dispatch:\n\njobs:\n  repo-sync:\n    runs-on: ubuntu-latest\n\n    steps:\n      # To use this repository's private action, you must check out the repository\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: actions-template-sync\n        uses: AndreasAugustin/actions-template-sync@&lt;replace_with_latest_version&gt;\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          source_repo_path: &lt;replace_with_source_repo_path&gt;\n          upstream_branch: main # defaults to main\n</code></pre> <p>Please replace the following variables</p> Variable replace with <code>&lt;replace_with_latest_version&gt;</code> replace with the latest release version <code>&lt;replace_with_source_repo_path&gt;</code> replace with the path of the source repository (without the hostname) <p>This is a base configuration used for public <code>github.com</code> repositories. Also private and github enterprise servers are supported. Please have a look into the available configuration paraemters</p>"},{"location":"git/git_action_sync/#authentication-and-authorization","title":"Authentication and authorization","text":"<p>Currently with a public repository as a source you do not need to do any changes and the example works out of the box. For a private source repository currently follwoing AUTHN/AUTHZ methods are supported</p>"},{"location":"git/git_action_sync/#ssh","title":"SSH","text":"<p><code>SSH</code> is supported. Here you can find an example for the setup.</p>"},{"location":"git/git_action_sync/#ssh-keygen","title":"SSH keygen","text":"<p>First you need to create an ssh key. Just use the <code>ssh-keygen</code> command. Important do set a password.</p> <p></p>"},{"location":"git/git_action_sync/#private-key","title":"Private Key","text":"<p>Add the private key as a secret into the target repository, e.q. with the name SOURCE_REPO_SSH_PRIVATE_KEY.</p> <ul> <li>click settings within the target repo</li> </ul> <p></p> <ul> <li>select Secrets -&gt; Actions</li> </ul> <p></p> <ul> <li>click New repository secret</li> </ul> <p></p> <ul> <li>name the secret (e.q. SOURCE_REPO_SSH_PRIVATE_KEY) and paste the private ssh key</li> </ul> <p></p>"},{"location":"git/git_action_sync/#public-key","title":"Public key","text":"<p>Add the public key as a deployment key into the source repository.</p> <ul> <li>click settings within the source repository</li> </ul> <p></p> <ul> <li>click deploy keys</li> </ul> <p></p> <ul> <li>click add deploy key</li> </ul> <p></p> <ul> <li>Give it a meaningful name. No need to add write permissions. Paste here your public ssh key</li> </ul> <p></p>"},{"location":"git/git_action_sync/#prepare-the-action","title":"Prepare the action","text":"<p>Now you need to prepare the action. Edit/create the github action config the following way</p> <p>As a best practice it is recommended that also the source_repo_path is used in a secret. Create a secret like you have done before.</p> <pre><code>jobs:\n  repo-sync:\n    runs-on: ubuntu-latest\n\n    steps:\n      # To use this repository's private action, you must check out the repository\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: actions-template-sync\n        uses: AndreasAugustin/actions-template-sync@&lt;replace_with_latest_version&gt;\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          source_repo_path: ${{ secrets.SOURCE_REPO_PATH }} # &lt;owner/repo&gt;, should be within secrets\n          source_repo_ssh_private_key: ${{ secrets.SOURCE_REPO_SSH_PRIVATE_KEY }} # contains the private ssh key of the private repository\n</code></pre> <p></p>"},{"location":"git/git_crypt/","title":"Git - share secrets","text":""},{"location":"git/git_crypt/#abstract","title":"Abstract","text":"<p>In some cases you want to securely share secrets with other teammates. Furthermore you want to have a history of those secrets. For this purpose Git crypt helps you to handle secrets within your git repository.</p> <p>git-crypt enables transparent encryption and decryption of files in a git repository. Files which you choose to protect are encrypted when committed, and decrypted when checked out. git-crypt lets you freely share a repository containing a mix of public and private content.</p> <p>Some features</p> <ul> <li>No accidentaly push secrets in clear text</li> <li>Possible to Share credentials</li> <li>Put credentials into version control</li> </ul>"},{"location":"git/git_crypt/#installation","title":"Installation","text":"<p>First we need to install git-crypt</p> <p>We need <code>make</code> for the installation. Please clone the repo and use the following commands. Please <code>cd</code> in a temporary directory first.</p> <pre><code>git clone git@github.com:AGWA/git-crypt.git\ncd git-crypt\nmake\nmake install\n</code></pre>"},{"location":"git/git_crypt/#remarks","title":"Remarks","text":"<ul> <li>for details please check install instructions to install git-crpyt.</li> <li>For users with docker knowledge: have prepared a docker image where git-secret is already installed.</li> <li><code>docker run -v &lt;local_git_repo&gt;:/home/git-secrets/ andyaugustin/git-secrets:main git-crypt</code></li> </ul>"},{"location":"git/git_crypt/#setup","title":"Setup","text":""},{"location":"git/git_crypt/#gpg","title":"GPG","text":"<p>We need a key-pair (maybe in reality it is already created for your mail adress) Use the mail adress which is added to your git user</p> <p>First we want to check those settings</p> <pre><code>$ git config --global user.email\njohn.doe@dummy.fake\n$ git config --global user.name\nJohn Doe\n</code></pre> <p>keep those entries in your mind or write them down :evil_imp:</p> <p>Now we want to generate the gpg key. Type in the name and mail you just received.</p> <pre><code>gpg --gen-key\n</code></pre>"},{"location":"git/git_crypt/#git-crypt","title":"git-crypt","text":"<p>We need to have a git repository available. Please create a repository with name git-crypt-test in your favourite git provider (e.q. GitHub, GitLab, Gitea, ...). Please clone the repository and <code>cd</code> into it.</p> <pre><code>git clone &lt;use_your_repo_url&gt;/git-crypt-test\ncd git-crypt-test\n</code></pre> <p>Now we need to init git-crypt</p> <pre><code>git-crypt init\n</code></pre> <p>Now we want to specify files we want to monitor and handle with git-crypt That is easy. Therefore we just need to add a .gitattributes file with the files we want to encrypt.</p> <pre><code>echo \"secretfile filter=git-crypt diff=git-crypt\\n*.key filter=git-crypt diff=git-crypt\\nsecretdir/** filter=git-crypt diff=git-crypt\" &gt;&gt; .gitattributes\n</code></pre> <p>The content of the .gitattributes file should look now</p> <pre><code>secretfile filter=git-crypt diff=git-crypt\n*.key filter=git-crypt diff=git-crypt\nsecretdir/** filter=git-crypt diff=git-crypt\n</code></pre> <p>This is like a .gitignore file and has the following content.</p> <ul> <li>handle all files with name secretfile with git-crypt</li> <li>handle all files with extension *.key with git-crypt</li> <li>handle all files within directory secretdir/ with git-crypt</li> </ul> <p>Now we add our git user to the secrets. Therefore we need to get the id of our gpg key.</p> <pre><code>gpg --list-key $(git config --global user.email)\n</code></pre> <p>(The id is at pub between / and the date).</p> <p>Copy it to any text editor.</p> <p>Now we add the key to the keyring of the local git repository database. Please replace  with the id you copied to the text editor. <pre><code>git-crypt add-gpg-user &lt;USER_ID&gt;\n</code></pre> <p>Now we add a file for encryption.</p> <pre><code>echo \"This file will be encrypted\" &gt;&gt; to_encrypt.key\n</code></pre> <p>and commit our changes</p> <pre><code>git add .\ngit commit -m \"add file to encrypt :lock:\"\n</code></pre> <p>Now lock the file and check it</p> <pre><code>git-crypt lock\n</code></pre> <p>just check the file</p> <pre><code>cat to_encrypt.key\n</code></pre> <p>it is encrypted. For unlocking type</p> <pre><code>git-crypt unlock\n</code></pre> <p>Check the file again</p> <pre><code>cat to_encrypt.key\n</code></pre> <p>The nice thing is that it is not possible to push the unencrypted file to git repo. Lets test it.</p> <pre><code>git add .\ngit commit -m \"add encrypted file\"\ngit push\n</code></pre> <p>Check the file in your favourite git provider. You can see that it is encrypted.</p>"},{"location":"git/git_crypt/#add-users-to-git-crypt-database","title":"Add users to git-crypt database","text":"<p>To add a user to git-crypt you need the public gpg file. Just tell the other users to use the following command</p> <pre><code>gpg --armor --output public-key.gpg --export &lt;key_mail_address&gt;\n</code></pre> <p>Import the key file into your gpg keyring and add trust level ultimate</p> <pre><code>gpg --import public-key.gpg\n# get the id of the imported key\ngpg --list-key &lt;key_mail_address&gt;\ngpg --edit-key &lt;key_id&gt;\ntrust\n# We need ultimate trust, so choose 5\nsave\n</code></pre> <p>now you are able to add the user as before with</p> <pre><code># the user_id is the id of the user in your public key_ring\ngit-crypt add-gpg-user &lt;USER_ID&gt;\n</code></pre> <p>Now the other user is able to decrypt the file with git-crypt in the git repository :rocket:</p> <p></p>"},{"location":"git/git_multi_user/","title":"GIT - multi user","text":""},{"location":"git/git_multi_user/#abstract","title":"Abstract","text":"<p>When we work on different projects, sometimes we have different git providers (e.q. GitHub, GitLab, Gitea,...). Also it is possible that we need to use different users for our contribution. This is obiously possible using git with https. Because ssh is considered more secure in context of git you need to manage several ssh keys.</p> <p>It is possible to specify the key you need. For example</p> <pre><code>GIT_SSH_COMMAND='ssh -i private_key_file -o IdentitiesOnly=yes' git clone user@host:repo.git\n</code></pre> <p>As you can see this is not super convenient. There is an easier way using an ssh config file.</p>"},{"location":"git/git_multi_user/#theory","title":"Theory","text":"<p>You are able to configure ssh with a file ~/.ssh/config. Remark If interested you are able to find all available configration parameters here You are able to set the identity related to the host with the following parameters</p> <pre><code>Host &lt;host&gt;:&lt;port&gt;\n  HostName &lt;host&gt;\n  Port &lt;port&gt;\n  IdentityFile &lt;path_to_id_file&gt;\n</code></pre> <ul> <li>Host: add a name for the host</li> <li>HostName: The domain, e.q. github.com, gitlab.com, ...</li> <li>IdentityFile: absolute path to the specific private ssh cert</li> <li>Port [OPTIONAL]: just use if you have your own git provider service running</li> </ul>"},{"location":"git/git_multi_user/#example","title":"example","text":""},{"location":"git/git_multi_user/#setup","title":"setup","text":"<p>Get somehow 2 users in 2 different git providers (e.q. GitHub, GitLab,...). Now lets create 2 different (public/private) ssh key pairs.</p> <pre><code>ssh-keygen -t rsa -N \"\" -C \"&lt;first_user_mail&gt;\" -f '~/.ssh/id_rsa_first'\nssh-keygen -t rsa -N \"\" -C \"&lt;second_user_mail&gt;\" -f '~/.ssh/id_rsa_second'\n</code></pre> <p>To be able to ssh into the git provider, you need to add the private keys to your git provider settings.</p> <pre><code>cat ~/.ssh/id_rsa_first.pub\ncat ~/.ssh/id_rsa_second.pub\n</code></pre> <p>This step is dependent on your git provider.</p> <p>Now we want to configure git ssh to use those files related to the git provider.</p> <pre><code>touch ~/.ssh/config\n</code></pre> <p>add the following content to the file. The hostname is dependent to the git provider.</p> <pre><code># user 1\nHost &lt;first_git_provider&gt;\n  HostName &lt;hostname_1&gt;\n  IdentityFile ~/.ssh/id_rsa_first\n\n# user 2\nHost &lt;second_git_provider&gt;\n  HostName &lt;hostname_2&gt;\n  IdentityFile ~/.ssh/id_rsa_second\n</code></pre> <p>to ~/.ssh/config</p>"},{"location":"git/git_multi_user/#test","title":"test","text":"<p>Now we are set to test the settings. Lets first create 2 repositories. One in each git provider.</p> <p>Now lets clone the repositories. <code>cd</code> in a directory of your choice.</p> <pre><code>git clone &lt;ssh_clone_url_1&gt;\ngit clone &lt;ssh_clone_url_2&gt;\n</code></pre> <p>We want to clone the repositories. Yay it works :rocket:</p> <p>As you can see when that the right user is auto selected :rocket:</p> <p></p>"},{"location":"git/git_secrets/","title":"GIT - Prevent accidentaly pushing credentials","text":""},{"location":"git/git_secrets/#abstract","title":"abstract","text":"<p>Sometimes by accident people accidentally push credentials or other sensitive information into a git repository. For example AWS_SECRET_ACCESS_KEY and AWS_ACCESS_KEY_ID. Obviously bad people are able to find those secrets in the git repository or history using them to e.q. start cryptominers in those accounts. That leads to super high costs and bills for the poor person who accidentally pushed those secrets. There is a tool which can prevent you doing such mistakes: git-secrets</p>"},{"location":"git/git_secrets/#installation","title":"Installation","text":"<p>Please check git secrets installation for your OS. Here I show you the installation for Linux. Just type the following commands</p> <pre><code>git clone git@github.com:awslabs/git-secrets.git\ncd git-secrets\n[sudo] make install\nmake test\n</code></pre> <p></p>"},{"location":"git/git_secrets/#remarks","title":"Remarks","text":"<ul> <li>For users with docker knowledge: have prepared a docker image where git-secret is already installed.</li> <li><code>docker run -v &lt;local_git_repo&gt;:/home/git-secrets/ andyaugustin/git-secrets:main git-secrets</code></li> <li>For uninstallation on Linux just remove the copied files again</li> </ul> <pre><code>rm /usr/local/bin/git-secrets\nrm /usr/local/share/man/man1/git-secrets.1\n</code></pre>"},{"location":"git/git_secrets/#fun-part","title":"Fun part","text":"<p>Now lets check the power of git-secrets. Please keep in mind that you need to enable the tool for every repository. It will install git hooks into your local repository.</p> <p>For the turorial we will init a git repo first and bootstrap git-secrets.</p> <pre><code>mkdir git-secrets-example\ncd git-secrets-example\ngit init\necho \"# git-secrets-example\" &gt;&gt; README.md\ngit add .\ngit commit [-S] -m \"doc(): initial commit :star:\"\ngit-secrets --install\n</code></pre> <p>As stated in the output we got 3 new files added into our local git repository. Those will prevent us to accidentally commit secrets to the git database. Lets check one of those files</p> <pre><code>$ cat .git/hooks/pre-commit\n#!/usr/bin/env bash\ngit secrets --pre_commit_hook -- \"$@\"\n</code></pre> <p>This hook will be run every time in the local git repo before the commit is added to the database. This means if the mentioned command will have an error, the commit won't be added to the local database.</p> <p></p> <p>Now lets understand some more details. For that we will add some fake AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY into our markdown file and lets try to commit it. Those keys are really fake, you can try :smiling_imp:</p> <pre><code>$ git secrets --register-aws\nOK\n$ echo \"This is fake aws key id AKIAIOSFODNN7EXAMPLA\" &gt;&gt; README.md\n$ git add .\n$ git commit -S -m \"doc(): accidentally add keys :alien:\"\nREADME.md:4:This is fake aws key id AKIAIOSFODNN7EXAMPLA\n\n[ERROR] Matched one or more prohibited patterns\n\nPossible mitigations:\n- Mark false positives as allowed using: git config --add secrets.allowed ...\n- Mark false positives as allowed by adding regular expressions to .gitallowed at repository's root directory\n- List your configured patterns: git config --get-all secrets.patterns\n- List your configured allowed patterns: git config --get-all secrets.allowed\n- List your configured allowed patterns in .gitallowed at repository's root directory\n- Use --no-verify if this is a one-time false positive\n</code></pre> <p>As you can see it is not possible to commit the changes to the git history because there is a AWS KEY in the change. In some cases you want to commit that key. Maybe because it is an example for a tutorial or anything else. This is quite easy to establish. Just add the key to a file called .gitallowed.</p> <pre><code>echo \"AKIAIOSFODNN7EXAMPLA\" &gt;&gt; .gitallowed\ngit add .\ngit commit [-S] -m \"doc(): now we are able to establish the commit :star:\"\n</code></pre> <p></p> <p></p>"},{"location":"git/git_sign_commits/","title":"Git - how and why sign commits","text":""},{"location":"git/git_sign_commits/#abstract","title":"abstract","text":"<p>You should always sign your git commits. Why?</p>"},{"location":"git/git_sign_commits/#why-to-sign-commits","title":"Why to sign commits","text":"<p>The git commits are super easy referenced to a user. Anyone all around the world is able to push commits with another name. The reference is done in the commit message with the user.email.</p> <p>You can try yourself. Just create a new repository in a folder of your choice.</p> <p>Let's create locally a git repository.</p> <pre><code>mkdir sign_commits\ncd sign_commits\ngit init\n</code></pre> <p></p> <p>First lets check our current global settings</p> <pre><code>$ git config --global user.email\njane.doe@world.universe\n</code></pre> <p>and compare them with our local git repo settings</p> <pre><code>git config user.email\n</code></pre> <p>Those are the same. Now lets change the local git repo settings</p> <pre><code>git config user.email 'john.doe@example.dev'\n</code></pre> <p>Remark You can also use <code>git config &lt;--global&gt; --edit</code> to edit all configuration values in editor</p> <p>Lets now check the current settings and compare them to the global settings.</p> <pre><code>git config user.email\ngit config --global user.email\n</code></pre> <p>You can see that those differ. This does not give us any value for our current context, but I wanted to make sure that we do not touch our global settings.</p> <p></p> <p>Now lets create a commit and check the history.</p> <pre><code>echo \"# git sign commits\" &gt;&gt; README.md\ngit add .\ngit commit -m \"doc(): add some super nice docs\"\ngit log\n</code></pre> <p></p> <p>Now lets change the user name and the mail and lets do another commit.</p> <pre><code>git config user.email 'fake.me@fake.me'\ngit config user.name 'fake me'\necho \"if the account exists e.q. on github.com the commit will be assigned to that person\" &gt;&gt; README.md\ngit add .\ngit commit -m \"doc(): add some super nice docs\"\ngit log\n</code></pre> <p></p> <p>You can see that the second commit is assigned to fake me with mail address fake.me@fake.me. If you are using github.com as your git provider and push the commit and also the mail address fake.me@fake.me is registered to an existing user, the commit will be assigned to that user.</p> <p>As you can see it is super easy to make commits in names of other persons. Like an example? Here is a prank of a fake Linus Torvalds stating that linux is deleted.</p> <p>As you can imagine there are not only pranks. This is a security issue. Imagine you are working in a team on a open source project on github. A teammate (who is a fake) is opening a pull request. You know that the original team mate is a great coder and you don't check in detail the changes and merge them into your main branch. This is obviously an attack vector. How to prevent? start signing your commits today</p>"},{"location":"git/git_sign_commits/#how-to-sign-commits","title":"How to sign commits","text":"<p>It is possible to sign git commits with GPG. First lets revert our fake changes.</p> <pre><code>git config --user.name 'john doe'\ngit config --user.email 'john.doe@example.dev'\n</code></pre> <p>Now we need to create a gpg key</p> <pre><code>gpg --gen-key\n</code></pre> <p>Follow the Dialog nd save with O. Now lets grab the Key-id and add it to the git config</p> <pre><code>gpg --list-key $(git config user.email)\ngit config [--global] user.signingkey &lt;key_id&gt;\n</code></pre> <p>Now you are able to sign your commits with the -S flag or you add it to the git settings to make it default behaviour.</p> <pre><code>git config [--global] commit.gpgsign true\n</code></pre> <p>Now lets check what has changed. We first create a signed commit and check the signature.</p> <pre><code>echo \"now the commits are signed\" &gt;&gt; README.md\ngit add .\ngit commit -S -m \"doc(): now with signed commit :star:\"\ngit log --show-signatur\n</code></pre> <p></p> <p>You should now also add the key to your git provider settings so that the git provider will verify the signature.</p>"},{"location":"git/git_sign_commits/#further-readings","title":"Further readings","text":"<ul> <li>github sign commits</li> <li>git sign commits</li> </ul>"}]}